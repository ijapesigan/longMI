---
title: "longMI: Example Using the longMI Package"
author: "Ivan Jacob Agaloos Pesigan"
output: rmarkdown::html_vignette
bibliography: "vignettes.bib"
csl: https://raw.githubusercontent.com/citation-style-language/styles/master/apa.csl
nocite: |
  @Millsap-2011
  @Osborne-Suddick-1972
vignette: >
  %\VignetteIndexEntry{longMI: Example Using the longMI Package}
  %\VignetteEngine{knitr::rmarkdown}
  %\VignetteEncoding{UTF-8}
---

```{r, include = FALSE}
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>"
)
```

This is a reproduction of the example in https://quantdev.ssri.psu.edu/tutorials/intro-basics-longitudinal-measurement-invariance
using the `longMI` package.

```{r}
#| message = FALSE
library(longMI)
```

## Data

```{r}
#| echo = FALSE
if (!exists("osbornesudick1972")) {
  try(
    data(
      "osbornesudick1972",
      package = "longMI"
    ),
    silent = TRUE
  )
}
df <- osbornesudick1972
```

```{r}
#| eval = FALSE
df <- longMI::osbornesudick1972
```

```{r}
head(df)
```

The package assumes that the data is in the wide format
and the variables are named as follows:
`paste0("y", time_point, "_", item_number)`.
For example, for the item 1 from the first time point,
the variable name should be `y1_1`.
The data set has two time points (1 and 6).
There is a single factor with items 1, 2, 3, and 4 as indicators.
The four items correspond to the information (`y1_1` and `y6_1`),
comprehension (`y1_2` and `y6_2`),
similarities (`y1_3` and `y6_3`), and
vocabulary (`y1_4` and `y6_4`)
components of the Wechsler Intelligence Scale for Children
[@Osborne-Suddick-1972].
We can use this information to specify the function arguments to be used later
as follows:

```{r}
time_points <- c(1, 6)
factor_loadings <- list(
  c(1, 2, 3, 4)
)
```

## Invariance

The `Invariance()` function can be used to fit the different longitudinal measurement invariance models
(configural, weak, strong, and strict invariance models).

```{r}
mi <- Invariance(
  data = df,
  time_points,
  factor_loadings,
  mimic = "mplus"
)
```

Fit Measures

```{r}
mi
```

Chi-square Difference Tests

```{r}
anova(mi)
```

Summary of the fitted models

```{r}
summary(mi)
```

## Fitting the Models One at a Time

The models can also be fitted one at a time using the
`Configural()`,
`Weak()`,
`Strong()`, and
`Strict()` functions.

### Model Fitting

#### Configural Invariance Model

In the configural invariance model,
the factor structure is constrained to be equal across time points.

```{r}
configural_fit <- Configural(
  data = df,
  time_points = time_points,
  factor_loadings = factor_loadings,
  mimic = "mplus"
)
```

#### Weak Invariance Model

In the weak invariance model,
assuming configural invariance,
the factor loadings are constrained to be equal across time points.

```{r}
weak_fit <- Weak(
  data = df,
  time_points = time_points,
  factor_loadings = factor_loadings,
  mimic = "mplus"
)
```

#### Strong Invariance Model

In the strong invariance model,
assuming weak invariance,
the measurement intercepts are constrained to be equal across time points.

```{r}
strong_fit <- Strong(
  data = df,
  time_points = time_points,
  factor_loadings = factor_loadings,
  mimic = "mplus"
)
```

#### Strict Invariance Model

In the strict invariance model,
assuming strong invariance,
the measurement error variances are constrained to be equal across time points.

```{r}
strict_fit <- Strict(
  data = df,
  time_points = time_points,
  factor_loadings = factor_loadings,
  mimic = "mplus"
)
```

### Model Comparisons

```{r}
mi <- Comparison(
  configural = configural_fit,
  weak = weak_fit,
  strong = strong_fit,
  strict = strict_fit
)
```

Fit Measures

```{r}
mi
```

Chi-square Difference Tests

```{r}
anova(mi)
```

Summary of the fitted models

```{r}
summary(mi)
```

## References
